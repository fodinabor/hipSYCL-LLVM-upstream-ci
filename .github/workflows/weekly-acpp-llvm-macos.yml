name: AdaptiveCpp-LLVM Upstream macOS

on:
    workflow_dispatch:
      inputs:
        fork:
          description: 'Repo orga/name'
          required: true
          default: 'AdaptiveCpp/AdaptiveCpp'
        branch:
          description: 'branch to test'
          required: true
          default: 'develop'
    schedule:
      - cron: '0 5 * * 1,4'
    push:

jobs:
  build_2stage_from_appleclang:
    name: AppleClang [macOS]
    runs-on: macos-latest
    strategy:
      matrix:
        clang_version: ['18']
    steps:
    - name: setup env
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "FORK=${{github.event.inputs.fork}}" >> $GITHUB_ENV
        echo "BRANCH=${{github.event.inputs.branch}}" >> $GITHUB_ENV
    - name: setup env
      if: ${{ github.event_name == 'schedule' || github.event_name == 'push' }}
      run: |
        echo "FORK=AdaptiveCpp/AdaptiveCpp" >> $GITHUB_ENV
        echo "BRANCH=feature/link-into-llvm" >> $GITHUB_ENV
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{matrix.clang_version}}
        restore-keys: |
          ${{ github.job }}
    - name: clone LLVM
      run: |
        git clone --recurse-submodules https://github.com/llvm/llvm-project --single-branch -b release/${{matrix.clang_version}}.x llvm
    - name: clone repository
      run: |
        git clone --recurse-submodules https://github.com/${FORK} -b ${BRANCH} AdaptiveCpp
    - name: install dependencies
      run: |
        set +e
        brew update
        brew install cmake
        brew install boost
        brew install ninja
        set -e
    - name: build
      run: |
        mkdir build && cd build
        cmake ../llvm/llvm -GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install  \
              -DLLVM_TARGETS_TO_BUILD="AArch64" \
              -DLLVM_ENABLE_PROJECTS="clang;lld" \
              -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
              -DLLVM_PARALLEL_LINK_JOBS=2 \
              -DLLVM_BUILD_LLVM_DYLIB=ON \
              -DLLVM_LINK_LLVM_DYLIB=ON \
              -DLLVM_CCACHE_BUILD=ON \
              -DCLANG_ENABLE_BOOTSTRAP=ON \
              -DCLANG_BOOTSTRAP_PASSTHROUGH="CMAKE_INTSALL_PREFIX;LLVM_TARGETS_TO_BUILD;LLVM_PARALLEL_LINK_JOBS;LLVM_BUILD_LLVM_DYLIB;LLVM_LINK_LLVM_DYLIB;LLVM_CCACHE_BUILD" \
              -DBOOTSTRAP_LLVM_ENABLE_PROJECTS="clang;lld;openmp" \
              -DBOOTSTRAP_LLVM_EXTERNAL_PROJECTS=AdaptiveCpp \
              -DBOOTSTRAP_LLVM_EXTERNAL_ADAPTIVECPP_SOURCE_DIR=`pwd`/../AdaptiveCpp \
              -DBOOTSTRAP_LLVM_ADAPTIVECPP_LINK_INTO_TOOLS=ON \
              -DBOOTSTRAP_WITH_OPENCL_BACKEND=OFF 
        ninja stage2-install

        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "PATH=${GITHUB_WORKSPACE}/install/bin:$PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: build CPU tests
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-cpu
        cd ${GITHUB_WORKSPACE}/build/tests-cpu
        cmake -GNinja -DACPP_TARGETS="omp" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: build generic SSCP tests
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-sscp
        cd ${GITHUB_WORKSPACE}/build/tests-sscp
        cmake -GNinja -DACPP_TARGETS="generic" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests  -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: run SSCP CPU tests
      run: |
        cd ${GITHUB_WORKSPACE}/build/tests-sscp
        LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib ./sycl_tests
    - name: run CPU tests
      run: |
        ulimit -s 65535
        cd ${GITHUB_WORKSPACE}/build/tests-cpu
        LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib ./sycl_tests
