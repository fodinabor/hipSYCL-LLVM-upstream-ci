name: AdaptiveCpp-LLVM Upstream

on:
  workflow_dispatch:
    inputs:
      fork:
        description: 'Repo orga/name'
        required: true
        default: 'AdaptiveCpp/AdaptiveCpp'
      branch:
        description: 'branch to test'
        required: true
        default: 'develop'
  schedule:
    - cron: '0 5 * * 1,4'
  push:


jobs:
  test-acpp-llvm:
    name: AdaptiveCpp/AdaptiveCpp with clang ${{ matrix.clang_version }} and ${{ matrix.cuda_or_rocm }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        clang_version: ['18']
        base_compiler: ['17']
        cuda: ['11.0']
        rocm_version: ['5.6.1']
        cuda_or_rocm: ['cuda', 'rocm']
        os: ['ubuntu-20.04']
    steps:
    - uses: actions/checkout@v2
    - name: setup env
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: |
        echo "FORK=${{github.event.inputs.fork}}" >> $GITHUB_ENV
        echo "BRANCH=${{github.event.inputs.branch}}" >> $GITHUB_ENV
    - name: setup env
      if: ${{ github.event_name == 'schedule' || github.event_name == 'push' }}
      run: |
        echo "FORK=AdaptiveCpp/AdaptiveCpp" >> $GITHUB_ENV
        echo "BRANCH=feature/link-into-llvm" >> $GITHUB_ENV
    - name: install compilation suite
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{matrix.base_compiler}}
        sudo apt install libclang-${{matrix.base_compiler}}-dev clang-tools-${{matrix.base_compiler}} ninja-build cmake
        echo "CC=clang-${{matrix.base_compiler}}" >> $GITHUB_ENV
        echo "CXX=clang++-${{matrix.base_compiler}}" >> $GITHUB_ENV
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{matrix.clang_version}}-${{matrix.cuda_or_rocm}}
        restore-keys: |
          ${{ github.job }}
    - name: clone LLVM
      run: |
        git clone --recurse-submodules https://github.com/llvm/llvm-project --single-branch -b release/${{matrix.clang_version}}.x llvm
    - name: clone repository
      run: |
        git clone --recurse-submodules https://github.com/${FORK} -b ${BRANCH} AdaptiveCpp
    - name: install CUDA 11.0
      if: ${{ matrix.cuda_or_rocm == 'cuda' }}
      run: |
        mkdir -p /opt/AdaptiveCpp/cuda
        wget -q -O cuda.sh http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda_11.0.2_450.51.05_linux.run
        sudo sh ./cuda.sh --override --silent --toolkit --no-man-page --no-drm --no-opengl-libs --installpath=/opt/AdaptiveCpp/cuda || true
        echo "CUDA Version 11.0.0" | sudo tee /opt/AdaptiveCpp/cuda/version.txt
        mkdir -p ${GITHUB_WORKSPACE}/install/lib/
        cp /opt/AdaptiveCpp/cuda/lib64/stubs/libcuda.so ${GITHUB_WORKSPACE}/install/lib/libcuda.so
        cp /opt/AdaptiveCpp/cuda/lib64/stubs/libcuda.so ${GITHUB_WORKSPACE}/install/lib/libcuda.so.1
        echo "TARGETS_TO_BUILD=;NVPTX" >> $GITHUB_ENV
    - name: install ROCm
      if: ${{ matrix.cuda_or_rocm == 'rocm' }}
      run: |
        sudo apt install libnuma-dev unzip
        wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
        echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/${{matrix.rocm_version}} focal main' | sudo tee /etc/apt/sources.list.d/rocm.list
        sudo apt update
        sudo apt install rocm-dev
        echo "TARGETS_TO_BUILD=;AMDGPU" >> $GITHUB_ENV
    - name: install boost (from apt)
      run: |
        sudo apt install libboost-all-dev ccache
    - name: build Adaptive Cpp
      run: |
        mkdir build && cd build
        cmake ../llvm/llvm -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install -DLLVM_TARGETS_TO_BUILD="X86;${TARGETS_TO_BUILD}" -DLLVM_ENABLE_PROJECTS="clang;openmp" -DLLVM_PARALLEL_LINK_JOBS=1 -DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON -DLLVM_CCACHE_BUILD=ON -DLLVM_EXTERNAL_PROJECTS=AdaptiveCpp -DLLVM_EXTERNAL_ADAPTIVECPP_SOURCE_DIR=`pwd`/../AdaptiveCpp -DLLVM_ADAPTIVECPP_LINK_INTO_TOOLS=ON -DWITH_OPENCL_BACKEND=OFF -DCUDA_TOOLKIT_ROOT_DIR=/opt/AdaptiveCpp/cuda -DROCM_PATH=/opt/rocm -DOPENMP_ENABLE_LIBOMPTARGET=OFF
        ninja -j2 install

        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "PATH=${GITHUB_WORKSPACE}/install/bin:$PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: build CPU tests
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-cpu
        cd ${GITHUB_WORKSPACE}/build/tests-cpu
        cmake -GNinja -DACPP_TARGETS="omp" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: build generic SSCP tests
      if: matrix.clang_version >= 14
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-sscp
        cd ${GITHUB_WORKSPACE}/build/tests-sscp
        cmake -GNinja -DACPP_TARGETS="generic" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests  -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: build CUDA tests
      if: ${{ matrix.cuda_or_rocm == 'cuda' }}
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-cuda
        cd ${GITHUB_WORKSPACE}/build/tests-cuda
        cmake -GNinja -DACPP_TARGETS="cuda:sm_60" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests  -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: build ROCm tests
      if: ${{ matrix.cuda_or_rocm == 'rocm' }}
      run: |
        mkdir ${GITHUB_WORKSPACE}/build/tests-rocm
        cd ${GITHUB_WORKSPACE}/build/tests-rocm
        cmake -GNinja -DACPP_TARGETS="hip:gfx906" -DAdaptiveCpp_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/AdaptiveCpp ${GITHUB_WORKSPACE}/AdaptiveCpp/tests  -DLLVM_DIR=${GITHUB_WORKSPACE}/install/lib/cmake/llvm
        ninja -j2
    - name: run CPU tests
      run: |
        cd ${GITHUB_WORKSPACE}/build/tests-cpu
        LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib ./sycl_tests
    - name: run SSCP CPU tests
      run: |
        cd ${GITHUB_WORKSPACE}/build/tests-sscp
        LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/lib ./sycl_tests